// Code generated by protoc-gen-go.
// source: fs.proto
// DO NOT EDIT!

/*
Package cloudfs is a generated protocol buffer package.

It is generated from these files:
	fs.proto

It has these top-level messages:
	InodeAttr
	InodeTime
	InodeChange
	StatRequest
	StatReply
	ChStatRequest
	ChStatReply
	MkDirRequest
	MkDirReply
	RmDirRequest
	RmDirReply
	LinkRequest
	LinkReply
	UnlinkRequest
	UnlinkReply
	PutAttrRequest
	PutAttrReply
	DeleteAttrRequest
	DeleteAttrReply
	OpenDirRequest
	OpenDirReply
	ReadDirRequest
	ReadDirReply
	ReadDirEntry
	WalkRequest
	WalkReply
	OpenFileRequest
	OpenFileReply
	ReadRequest
	ReadReply
	AppendRequest
	AppendReply
	TruncateRequest
	TruncateReply
	FinalizeRequest
	FinalizeReply
	CloseRequest
	CloseReply
*/
package cloudfs

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type OpenDirMode int32

const (
	OpenDirMode_DIR_EXISTING OpenDirMode = 0
	OpenDirMode_DIR_NEW      OpenDirMode = 1
	OpenDirMode_DIR_EITHER   OpenDirMode = 2
)

var OpenDirMode_name = map[int32]string{
	0: "DIR_EXISTING",
	1: "DIR_NEW",
	2: "DIR_EITHER",
}
var OpenDirMode_value = map[string]int32{
	"DIR_EXISTING": 0,
	"DIR_NEW":      1,
	"DIR_EITHER":   2,
}

func (x OpenDirMode) String() string {
	return proto.EnumName(OpenDirMode_name, int32(x))
}

type OpenFileMode int32

const (
	OpenFileMode_RD           OpenFileMode = 0
	OpenFileMode_RD_PARTIAL   OpenFileMode = 1
	OpenFileMode_WR_NEW       OpenFileMode = 2
	OpenFileMode_WR_PARTIAL   OpenFileMode = 3
	OpenFileMode_WR_EITHER    OpenFileMode = 4
	OpenFileMode_RDWR_NEW     OpenFileMode = 5
	OpenFileMode_RDWR_PARTIAL OpenFileMode = 6
	OpenFileMode_RDWR_EITHER  OpenFileMode = 7
)

var OpenFileMode_name = map[int32]string{
	0: "RD",
	1: "RD_PARTIAL",
	2: "WR_NEW",
	3: "WR_PARTIAL",
	4: "WR_EITHER",
	5: "RDWR_NEW",
	6: "RDWR_PARTIAL",
	7: "RDWR_EITHER",
}
var OpenFileMode_value = map[string]int32{
	"RD":           0,
	"RD_PARTIAL":   1,
	"WR_NEW":       2,
	"WR_PARTIAL":   3,
	"WR_EITHER":    4,
	"RDWR_NEW":     5,
	"RDWR_PARTIAL": 6,
	"RDWR_EITHER":  7,
}

func (x OpenFileMode) String() string {
	return proto.EnumName(OpenFileMode_name, int32(x))
}

type InodeChange_Action int32

const (
	InodeChange_NO_OP                  InodeChange_Action = 0
	InodeChange_ADD_ATTR               InodeChange_Action = 1
	InodeChange_MOD_ATTR               InodeChange_Action = 2
	InodeChange_DEL_ATTR               InodeChange_Action = 3
	InodeChange_SET_CREATED_TIME       InodeChange_Action = 4
	InodeChange_SET_LAST_MODIFIED_TIME InodeChange_Action = 5
	InodeChange_SET_ADMIN_ID           InodeChange_Action = 6
	InodeChange_SET_QUOTA_ID           InodeChange_Action = 7
	InodeChange_SET_WRITER_ID          InodeChange_Action = 8
	InodeChange_SET_READER_ID          InodeChange_Action = 9
)

var InodeChange_Action_name = map[int32]string{
	0: "NO_OP",
	1: "ADD_ATTR",
	2: "MOD_ATTR",
	3: "DEL_ATTR",
	4: "SET_CREATED_TIME",
	5: "SET_LAST_MODIFIED_TIME",
	6: "SET_ADMIN_ID",
	7: "SET_QUOTA_ID",
	8: "SET_WRITER_ID",
	9: "SET_READER_ID",
}
var InodeChange_Action_value = map[string]int32{
	"NO_OP":                  0,
	"ADD_ATTR":               1,
	"MOD_ATTR":               2,
	"DEL_ATTR":               3,
	"SET_CREATED_TIME":       4,
	"SET_LAST_MODIFIED_TIME": 5,
	"SET_ADMIN_ID":           6,
	"SET_QUOTA_ID":           7,
	"SET_WRITER_ID":          8,
	"SET_READER_ID":          9,
}

func (x InodeChange_Action) String() string {
	return proto.EnumName(InodeChange_Action_name, int32(x))
}

type InodeAttr struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *InodeAttr) Reset()         { *m = InodeAttr{} }
func (m *InodeAttr) String() string { return proto.CompactTextString(m) }
func (*InodeAttr) ProtoMessage()    {}

type InodeTime struct {
	Seconds     int64  `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *InodeTime) Reset()         { *m = InodeTime{} }
func (m *InodeTime) String() string { return proto.CompactTextString(m) }
func (*InodeTime) ProtoMessage()    {}

type InodeChange struct {
	Action    InodeChange_Action `protobuf:"varint,1,opt,name=action,enum=cloud9.fs.InodeChange_Action" json:"action,omitempty"`
	AttrValue *InodeAttr         `protobuf:"bytes,2,opt,name=attr_value" json:"attr_value,omitempty"`
	TimeValue *InodeTime         `protobuf:"bytes,3,opt,name=time_value" json:"time_value,omitempty"`
	U32Value  uint32             `protobuf:"varint,4,opt,name=u32_value" json:"u32_value,omitempty"`
}

func (m *InodeChange) Reset()         { *m = InodeChange{} }
func (m *InodeChange) String() string { return proto.CompactTextString(m) }
func (*InodeChange) ProtoMessage()    {}

func (m *InodeChange) GetAttrValue() *InodeAttr {
	if m != nil {
		return m.AttrValue
	}
	return nil
}

func (m *InodeChange) GetTimeValue() *InodeTime {
	if m != nil {
		return m.TimeValue
	}
	return nil
}

type StatRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *StatRequest) Reset()         { *m = StatRequest{} }
func (m *StatRequest) String() string { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()    {}

type StatReply struct {
	Inode        []byte       `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Version      uint64       `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Size         uint64       `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Attr         []*InodeAttr `protobuf:"bytes,4,rep,name=attr" json:"attr,omitempty"`
	Created      *InodeTime   `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	LastModified *InodeTime   `protobuf:"bytes,6,opt,name=last_modified" json:"last_modified,omitempty"`
	LastChanged  *InodeTime   `protobuf:"bytes,7,opt,name=last_changed" json:"last_changed,omitempty"`
	AdminId      uint32       `protobuf:"varint,8,opt,name=admin_id" json:"admin_id,omitempty"`
	QuotaId      uint32       `protobuf:"varint,9,opt,name=quota_id" json:"quota_id,omitempty"`
	WriterId     uint32       `protobuf:"varint,10,opt,name=writer_id" json:"writer_id,omitempty"`
	ReaderId     uint32       `protobuf:"varint,11,opt,name=reader_id" json:"reader_id,omitempty"`
	IsDirectory  bool         `protobuf:"varint,12,opt,name=is_directory" json:"is_directory,omitempty"`
	IsFinal      bool         `protobuf:"varint,13,opt,name=is_final" json:"is_final,omitempty"`
}

func (m *StatReply) Reset()         { *m = StatReply{} }
func (m *StatReply) String() string { return proto.CompactTextString(m) }
func (*StatReply) ProtoMessage()    {}

func (m *StatReply) GetAttr() []*InodeAttr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *StatReply) GetCreated() *InodeTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *StatReply) GetLastModified() *InodeTime {
	if m != nil {
		return m.LastModified
	}
	return nil
}

func (m *StatReply) GetLastChanged() *InodeTime {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

type ChStatRequest struct {
	Path    string         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Inode   []byte         `protobuf:"bytes,2,opt,name=inode,proto3" json:"inode,omitempty"`
	Version uint64         `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Change  []*InodeChange `protobuf:"bytes,4,rep,name=change" json:"change,omitempty"`
}

func (m *ChStatRequest) Reset()         { *m = ChStatRequest{} }
func (m *ChStatRequest) String() string { return proto.CompactTextString(m) }
func (*ChStatRequest) ProtoMessage()    {}

func (m *ChStatRequest) GetChange() []*InodeChange {
	if m != nil {
		return m.Change
	}
	return nil
}

type ChStatReply struct {
	NewVersion uint64 `protobuf:"varint,1,opt,name=new_version" json:"new_version,omitempty"`
}

func (m *ChStatReply) Reset()         { *m = ChStatReply{} }
func (m *ChStatReply) String() string { return proto.CompactTextString(m) }
func (*ChStatReply) ProtoMessage()    {}

type MkDirRequest struct {
	Path       string         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	OkIfExists bool           `protobuf:"varint,2,opt,name=ok_if_exists" json:"ok_if_exists,omitempty"`
	Change     []*InodeChange `protobuf:"bytes,3,rep,name=change" json:"change,omitempty"`
}

func (m *MkDirRequest) Reset()         { *m = MkDirRequest{} }
func (m *MkDirRequest) String() string { return proto.CompactTextString(m) }
func (*MkDirRequest) ProtoMessage()    {}

func (m *MkDirRequest) GetChange() []*InodeChange {
	if m != nil {
		return m.Change
	}
	return nil
}

type MkDirReply struct {
}

func (m *MkDirReply) Reset()         { *m = MkDirReply{} }
func (m *MkDirReply) String() string { return proto.CompactTextString(m) }
func (*MkDirReply) ProtoMessage()    {}

type RmDirRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *RmDirRequest) Reset()         { *m = RmDirRequest{} }
func (m *RmDirRequest) String() string { return proto.CompactTextString(m) }
func (*RmDirRequest) ProtoMessage()    {}

type RmDirReply struct {
}

func (m *RmDirReply) Reset()         { *m = RmDirReply{} }
func (m *RmDirReply) String() string { return proto.CompactTextString(m) }
func (*RmDirReply) ProtoMessage()    {}

type LinkRequest struct {
	OldPath string `protobuf:"bytes,1,opt,name=old_path" json:"old_path,omitempty"`
	NewPath string `protobuf:"bytes,2,opt,name=new_path" json:"new_path,omitempty"`
}

func (m *LinkRequest) Reset()         { *m = LinkRequest{} }
func (m *LinkRequest) String() string { return proto.CompactTextString(m) }
func (*LinkRequest) ProtoMessage()    {}

type LinkReply struct {
}

func (m *LinkReply) Reset()         { *m = LinkReply{} }
func (m *LinkReply) String() string { return proto.CompactTextString(m) }
func (*LinkReply) ProtoMessage()    {}

type UnlinkRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *UnlinkRequest) Reset()         { *m = UnlinkRequest{} }
func (m *UnlinkRequest) String() string { return proto.CompactTextString(m) }
func (*UnlinkRequest) ProtoMessage()    {}

type UnlinkReply struct {
}

func (m *UnlinkReply) Reset()         { *m = UnlinkReply{} }
func (m *UnlinkReply) String() string { return proto.CompactTextString(m) }
func (*UnlinkReply) ProtoMessage()    {}

type PutAttrRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Attr string `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PutAttrRequest) Reset()         { *m = PutAttrRequest{} }
func (m *PutAttrRequest) String() string { return proto.CompactTextString(m) }
func (*PutAttrRequest) ProtoMessage()    {}

type PutAttrReply struct {
}

func (m *PutAttrReply) Reset()         { *m = PutAttrReply{} }
func (m *PutAttrReply) String() string { return proto.CompactTextString(m) }
func (*PutAttrReply) ProtoMessage()    {}

type DeleteAttrRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Attr string `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *DeleteAttrRequest) Reset()         { *m = DeleteAttrRequest{} }
func (m *DeleteAttrRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAttrRequest) ProtoMessage()    {}

type DeleteAttrReply struct {
}

func (m *DeleteAttrReply) Reset()         { *m = DeleteAttrReply{} }
func (m *DeleteAttrReply) String() string { return proto.CompactTextString(m) }
func (*DeleteAttrReply) ProtoMessage()    {}

type OpenDirRequest struct {
	Path   string         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode   OpenDirMode    `protobuf:"varint,2,opt,name=mode,enum=cloud9.fs.OpenDirMode" json:"mode,omitempty"`
	Change []*InodeChange `protobuf:"bytes,3,rep,name=change" json:"change,omitempty"`
}

func (m *OpenDirRequest) Reset()         { *m = OpenDirRequest{} }
func (m *OpenDirRequest) String() string { return proto.CompactTextString(m) }
func (*OpenDirRequest) ProtoMessage()    {}

func (m *OpenDirRequest) GetChange() []*InodeChange {
	if m != nil {
		return m.Change
	}
	return nil
}

type OpenDirReply struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *OpenDirReply) Reset()         { *m = OpenDirReply{} }
func (m *OpenDirReply) String() string { return proto.CompactTextString(m) }
func (*OpenDirReply) ProtoMessage()    {}

type ReadDirRequest struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *ReadDirRequest) Reset()         { *m = ReadDirRequest{} }
func (m *ReadDirRequest) String() string { return proto.CompactTextString(m) }
func (*ReadDirRequest) ProtoMessage()    {}

type ReadDirReply struct {
	Entry []*ReadDirEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *ReadDirReply) Reset()         { *m = ReadDirReply{} }
func (m *ReadDirReply) String() string { return proto.CompactTextString(m) }
func (*ReadDirReply) ProtoMessage()    {}

func (m *ReadDirReply) GetEntry() []*ReadDirEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type ReadDirEntry struct {
	Filename    string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	IsDirectory bool   `protobuf:"varint,2,opt,name=is_directory" json:"is_directory,omitempty"`
}

func (m *ReadDirEntry) Reset()         { *m = ReadDirEntry{} }
func (m *ReadDirEntry) String() string { return proto.CompactTextString(m) }
func (*ReadDirEntry) ProtoMessage()    {}

type WalkRequest struct {
	Root string `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (m *WalkRequest) Reset()         { *m = WalkRequest{} }
func (m *WalkRequest) String() string { return proto.CompactTextString(m) }
func (*WalkRequest) ProtoMessage()    {}

type WalkReply struct {
	Dir   string          `protobuf:"bytes,1,opt,name=dir" json:"dir,omitempty"`
	Entry []*ReadDirEntry `protobuf:"bytes,2,rep,name=entry" json:"entry,omitempty"`
}

func (m *WalkReply) Reset()         { *m = WalkReply{} }
func (m *WalkReply) String() string { return proto.CompactTextString(m) }
func (*WalkReply) ProtoMessage()    {}

func (m *WalkReply) GetEntry() []*ReadDirEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type OpenFileRequest struct {
	Path   string         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode   OpenFileMode   `protobuf:"varint,2,opt,name=mode,enum=cloud9.fs.OpenFileMode" json:"mode,omitempty"`
	Change []*InodeChange `protobuf:"bytes,3,rep,name=change" json:"change,omitempty"`
}

func (m *OpenFileRequest) Reset()         { *m = OpenFileRequest{} }
func (m *OpenFileRequest) String() string { return proto.CompactTextString(m) }
func (*OpenFileRequest) ProtoMessage()    {}

func (m *OpenFileRequest) GetChange() []*InodeChange {
	if m != nil {
		return m.Change
	}
	return nil
}

type OpenFileReply struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *OpenFileReply) Reset()         { *m = OpenFileReply{} }
func (m *OpenFileReply) String() string { return proto.CompactTextString(m) }
func (*OpenFileReply) ProtoMessage()    {}

type ReadRequest struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Length uint64 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}

type ReadReply struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReadReply) Reset()         { *m = ReadReply{} }
func (m *ReadReply) String() string { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()    {}

type AppendRequest struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AppendRequest) Reset()         { *m = AppendRequest{} }
func (m *AppendRequest) String() string { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()    {}

type AppendReply struct {
}

func (m *AppendReply) Reset()         { *m = AppendReply{} }
func (m *AppendReply) String() string { return proto.CompactTextString(m) }
func (*AppendReply) ProtoMessage()    {}

type TruncateRequest struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *TruncateRequest) Reset()         { *m = TruncateRequest{} }
func (m *TruncateRequest) String() string { return proto.CompactTextString(m) }
func (*TruncateRequest) ProtoMessage()    {}

type TruncateReply struct {
}

func (m *TruncateReply) Reset()         { *m = TruncateReply{} }
func (m *TruncateReply) String() string { return proto.CompactTextString(m) }
func (*TruncateReply) ProtoMessage()    {}

type FinalizeRequest struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *FinalizeRequest) Reset()         { *m = FinalizeRequest{} }
func (m *FinalizeRequest) String() string { return proto.CompactTextString(m) }
func (*FinalizeRequest) ProtoMessage()    {}

type FinalizeReply struct {
}

func (m *FinalizeReply) Reset()         { *m = FinalizeReply{} }
func (m *FinalizeReply) String() string { return proto.CompactTextString(m) }
func (*FinalizeReply) ProtoMessage()    {}

type CloseRequest struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *CloseRequest) Reset()         { *m = CloseRequest{} }
func (m *CloseRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()    {}

type CloseReply struct {
}

func (m *CloseReply) Reset()         { *m = CloseReply{} }
func (m *CloseReply) String() string { return proto.CompactTextString(m) }
func (*CloseReply) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("cloud9.fs.OpenDirMode", OpenDirMode_name, OpenDirMode_value)
	proto.RegisterEnum("cloud9.fs.OpenFileMode", OpenFileMode_name, OpenFileMode_value)
	proto.RegisterEnum("cloud9.fs.InodeChange_Action", InodeChange_Action_name, InodeChange_Action_value)
}

// Client API for API service

type APIClient interface {
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	ChStat(ctx context.Context, in *ChStatRequest, opts ...grpc.CallOption) (*ChStatReply, error)
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkReply, error)
	Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkReply, error)
	OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirReply, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (API_ReadDirClient, error)
	Walk(ctx context.Context, in *WalkRequest, opts ...grpc.CallOption) (API_WalkClient, error)
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (API_ReadClient, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error)
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateReply, error)
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeReply, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ChStat(ctx context.Context, in *ChStatRequest, opts ...grpc.CallOption) (*ChStatReply, error) {
	out := new(ChStatReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/ChStat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkReply, error) {
	out := new(LinkReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/Link", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkReply, error) {
	out := new(UnlinkReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/Unlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirReply, error) {
	out := new(OpenDirReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/OpenDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (API_ReadDirClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/cloud9.fs.API/ReadDir", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIReadDirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ReadDirClient interface {
	Recv() (*ReadDirReply, error)
	grpc.ClientStream
}

type aPIReadDirClient struct {
	grpc.ClientStream
}

func (x *aPIReadDirClient) Recv() (*ReadDirReply, error) {
	m := new(ReadDirReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Walk(ctx context.Context, in *WalkRequest, opts ...grpc.CallOption) (API_WalkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/cloud9.fs.API/Walk", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIWalkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_WalkClient interface {
	Recv() (*WalkReply, error)
	grpc.ClientStream
}

type aPIWalkClient struct {
	grpc.ClientStream
}

func (x *aPIWalkClient) Recv() (*WalkReply, error) {
	m := new(WalkReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileReply, error) {
	out := new(OpenFileReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/OpenFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (API_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[2], c.cc, "/cloud9.fs.API/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ReadClient interface {
	Recv() (*ReadReply, error)
	grpc.ClientStream
}

type aPIReadClient struct {
	grpc.ClientStream
}

func (x *aPIReadClient) Recv() (*ReadReply, error) {
	m := new(ReadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error) {
	out := new(AppendReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/Append", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateReply, error) {
	out := new(TruncateReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/Truncate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeReply, error) {
	out := new(FinalizeReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/Finalize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := grpc.Invoke(ctx, "/cloud9.fs.API/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Stat(context.Context, *StatRequest) (*StatReply, error)
	ChStat(context.Context, *ChStatRequest) (*ChStatReply, error)
	Link(context.Context, *LinkRequest) (*LinkReply, error)
	Unlink(context.Context, *UnlinkRequest) (*UnlinkReply, error)
	OpenDir(context.Context, *OpenDirRequest) (*OpenDirReply, error)
	ReadDir(*ReadDirRequest, API_ReadDirServer) error
	Walk(*WalkRequest, API_WalkServer) error
	OpenFile(context.Context, *OpenFileRequest) (*OpenFileReply, error)
	Read(*ReadRequest, API_ReadServer) error
	Append(context.Context, *AppendRequest) (*AppendReply, error)
	Truncate(context.Context, *TruncateRequest) (*TruncateReply, error)
	Finalize(context.Context, *FinalizeRequest) (*FinalizeReply, error)
	Close(context.Context, *CloseRequest) (*CloseReply, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Stat_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(StatRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Stat(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ChStat_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ChStatRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ChStat(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Link_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(LinkRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Link(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Unlink_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(UnlinkRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Unlink(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_OpenDir_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(OpenDirRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).OpenDir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ReadDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ReadDir(m, &aPIReadDirServer{stream})
}

type API_ReadDirServer interface {
	Send(*ReadDirReply) error
	grpc.ServerStream
}

type aPIReadDirServer struct {
	grpc.ServerStream
}

func (x *aPIReadDirServer) Send(m *ReadDirReply) error {
	return x.ServerStream.SendMsg(m)
}

func _API_Walk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WalkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Walk(m, &aPIWalkServer{stream})
}

type API_WalkServer interface {
	Send(*WalkReply) error
	grpc.ServerStream
}

type aPIWalkServer struct {
	grpc.ServerStream
}

func (x *aPIWalkServer) Send(m *WalkReply) error {
	return x.ServerStream.SendMsg(m)
}

func _API_OpenFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(OpenFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).OpenFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Read(m, &aPIReadServer{stream})
}

type API_ReadServer interface {
	Send(*ReadReply) error
	grpc.ServerStream
}

type aPIReadServer struct {
	grpc.ServerStream
}

func (x *aPIReadServer) Send(m *ReadReply) error {
	return x.ServerStream.SendMsg(m)
}

func _API_Append_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(AppendRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Append(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Truncate_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(TruncateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Truncate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Finalize_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Finalize(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Close_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CloseRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Close(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud9.fs.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _API_Stat_Handler,
		},
		{
			MethodName: "ChStat",
			Handler:    _API_ChStat_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _API_Link_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _API_Unlink_Handler,
		},
		{
			MethodName: "OpenDir",
			Handler:    _API_OpenDir_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _API_OpenFile_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _API_Append_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _API_Truncate_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _API_Finalize_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _API_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadDir",
			Handler:       _API_ReadDir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Walk",
			Handler:       _API_Walk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _API_Read_Handler,
			ServerStreams: true,
		},
	},
}
