syntax = "proto3";

package cloud9.fs;

option go_package = "cloudfs";

service API {
  rpc Stat (StatRequest) returns (StatReply) {}
  rpc ChStat (ChStatRequest) returns (ChStatReply) {}
  rpc Link (LinkRequest) returns (LinkReply) {}
  rpc Unlink (UnlinkRequest) returns (UnlinkReply) {}

  rpc OpenDir (OpenDirRequest) returns (OpenDirReply) {}
  rpc ReadDir (ReadDirRequest) returns (stream ReadDirReply) {}
  rpc Walk (WalkRequest) returns (stream WalkReply) {}

  rpc OpenFile (OpenFileRequest) returns (OpenFileReply) {}
  rpc Read (ReadRequest) returns (stream ReadReply) {}
  rpc Append (AppendRequest) returns (AppendReply) {}
  rpc Truncate (TruncateRequest) returns (TruncateReply) {}
  rpc Finalize (FinalizeRequest) returns (FinalizeReply) {}

  rpc Close (CloseRequest) returns (CloseReply) {}
}

message InodeAttr {
  string name = 1;
  bytes value = 2;
}
message InodeTime {
  int64 seconds = 1;
  uint32 nanoseconds = 2;
}
message InodeChange {
  enum Action {
    NO_OP = 0;
    ADD_ATTR = 1;
    MOD_ATTR = 2;
    DEL_ATTR = 3;
    SET_CREATED_TIME = 4;
    SET_LAST_MODIFIED_TIME = 5;
    SET_ADMIN_ID = 6;
    SET_QUOTA_ID = 7;
    SET_WRITER_ID = 8;
    SET_READER_ID = 9;
  }
  Action action = 1;
  oneof value {
    InodeAttr attr_value = 2;
    InodeTime time_value = 3;
    uint32 u32_value = 4;
  }
}

message StatRequest { string path = 1; }
message StatReply {
  bytes inode = 1;
  uint64 version = 2;
  uint64 size = 3;
  repeated InodeAttr attr = 4;
  InodeTime created = 5;
  InodeTime last_modified = 6;
  InodeTime last_changed = 7;
  uint32 admin_id = 8;
  uint32 quota_id = 9;
  uint32 writer_id = 10;
  uint32 reader_id = 11;
  bool is_directory = 12;
  bool is_final = 13;
}

message ChStatRequest {
  string path = 1;
  bytes inode = 2;
  uint64 version = 3;
  repeated InodeChange change = 4;
}
message ChStatReply {
  uint64 new_version = 1;
}

message MkDirRequest {
  string path = 1;
  bool ok_if_exists = 2;
  repeated InodeChange change = 3;
}
message MkDirReply {}

message RmDirRequest { string path = 1; }
message RmDirReply {}

message LinkRequest { string old_path = 1; string new_path = 2; }
message LinkReply {}

message UnlinkRequest { string path = 1; }
message UnlinkReply {}

message PutAttrRequest { string path = 1; string attr = 2; bytes data = 3; }
message PutAttrReply {}

message DeleteAttrRequest { string path = 1; string attr = 2; }
message DeleteAttrReply {}

message OpenDirRequest {
  string path = 1;
  OpenDirMode mode = 2;
  repeated InodeChange change = 3;
}
message OpenDirReply { bytes handle = 1; }
enum OpenDirMode {
  DIR_EXISTING = 0;
  DIR_NEW = 1;
  DIR_EITHER = 2;
}

message ReadDirRequest { bytes handle = 1; }
message ReadDirReply {
  repeated ReadDirEntry entry = 1;
}
message ReadDirEntry {
  string filename = 1;
  bool is_directory = 2;
}

message WalkRequest {
  string root = 1;
}
message WalkReply {
  string dir = 1;
  repeated ReadDirEntry entry = 2;
}

message OpenFileRequest {
  string path = 1;
  OpenFileMode mode = 2;
  repeated InodeChange change = 3;
}
message OpenFileReply { bytes handle = 1; }
enum OpenFileMode {
  RD = 0;
  RD_PARTIAL = 1;
  WR_NEW = 2;
  WR_PARTIAL = 3;
  WR_EITHER = 4;
  RDWR_NEW = 5;
  RDWR_PARTIAL = 6;
  RDWR_EITHER = 7;
}

message ReadRequest {
  bytes handle = 1;
  uint64 offset = 2;
  uint64 length = 3;
}
message ReadReply { bytes data = 1; }

message AppendRequest {
  bytes handle = 1;
  bytes data = 2;
}
message AppendReply {}

message TruncateRequest {
  bytes handle = 1;
  uint64 offset = 2;
}
message TruncateReply {}

message FinalizeRequest { bytes handle = 1; }
message FinalizeReply {}

message CloseRequest { bytes handle = 1; }
message CloseReply {}
